import java.io.*;
import java.util.*;

public class TwoDTree {
	private int N, size ;
	private TreeNode head;
	private class TreeNode {
		private Point p;
		private TreeNode l, r;
		private TreeNode(Point p){
			this.p=p;
			l=null;
			r=null;
		}
	}
	public TwoDTree(int size){
		head = null;
		N=0;
		this.size = size;
		
	} 
	public boolean isEmpty(){
		if(N==0){
			return true;
		}
		else {
			return false;
		}
	} 
	public int size(){
		return size;
	} 
	public void insert(Point p){
		 int level = 1;
		 head = insertNode(head, p,level);
		 N++;
	}
	private TreeNode insertNode(TreeNode h, Point p,int level){
		if (h == null) return new TreeNode(p);
		
		if ((level%2==1)||(level==1)){
			if(p.x()>h.p.x()){
				level++;
				h.r = insertNode(h.r, p,level);
			}
			else{
				level++;
				h.l = insertNode(h.l, p,level);
			}
		}
		else{
			if(p.y()>h.p.y()){
				level++;
				h.r = insertNode(h.r, p,level);
			}
			else{
				level++;
				h.l = insertNode(h.l, p,level);
			}
			
		}
		return h; 
		 
	}
	
	public boolean search(Point p){
		int level = 1;
		return searchNode(head,p,level);
	} 
	
	private boolean searchNode(TreeNode h, Point p,int level){
		if(h==null){ 
			return false;
		}
		if ((p.x()== h.p.x())&&(p.y()==h.p.y())){
			return true;
		}
		 
	   
		if ((level%2==1)||(level==1)){
			if(p.x()>h.p.x()){
				level++;
				return searchNode(h.r, p,level);
			}
			else{
				level++;
				return searchNode(h.l, p,level);
			}
		}
		else{
			if(p.y()>h.p.y()){
				level++;
				return searchNode(h.r, p,level);
			}
			else{
				level++;
				return searchNode(h.l, p, level);
			}
			
		}
		
	}
	
	public Point nearestNeighbor(Point p){
		if(isEmpty()){
			return null;
		}
		else{
			double mindist=head.p.distanceTo(p);
			int level = 1;
			return nearest(head,p,level,mindist,null,head);
		}
	} // point in the tree that is
	//closest to p
	//(null if tree is empty)
	public Point nearest(TreeNode h, Point p, int level, double mindist, Rectangle previous, TreeNode minnode){
		
		if(h==null){
			return minnode.p;
		}
		if ((p.x()== h.p.x())&&(p.y()==h.p.y())){
			return h.p;
		}
		 
	    if(level==1){
	    	Rectangle rectl = new Rectangle(0,0,h.p.x(),100);
			Rectangle rectr = new Rectangle(h.p.x(),0,100,100);
			if(mindist>=rectl.distanceTo(p)){
				if(mindist > h.l.p.distanceTo(p)){
					mindist = h.l.p.distanceTo(p);
					minnode = h.l;
				}
				level++;
			    previous = rectl;
				nearest(h.l,p,level,mindist,previous,minnode);
			}
		    if(mindist>=rectr.distanceTo(p)){
				if(mindist > h.r.p.distanceTo(p)){
					mindist = h.r.p.distanceTo(p);
					minnode = h.r;
				}
				level++;
				previous = rectr;
				nearest(h.r,p,level,mindist,previous,minnode);
			}
			else{
				return h.p;
			}
	    }
		else if (level%2==1){
			Rectangle rectl = new Rectangle(0,0,h.p.x(),previous.p.y());
			Rectangle rectr = new Rectangle(h.p.x(),100,previous.p.y(),100);
			if(mindist>=rectl.distanceTo(p)){
				if(mindist > h.l.p.distanceTo(p)){
					mindist = h.l.p.distanceTo(p);
					minnode = h.l;
				}
				level++;
				previous = rectl;
				nearest(h.l,p,level,mindist,previous,minnode);
			}
		    if(mindist>=rectr.distanceTo(p)){
				if(mindist > h.r.p.distanceTo(p)){
					mindist = h.r.p.distanceTo(p);
					minnode = h.r;
				}
				level++;
				previous = rectr;
				nearest(h.r,p,level,mindist,previous,minnode);
			}
			else{
				return h.p;
			}
		}
		else{
			Rectangle rectl = new Rectangle(previous.xmin(),previous.ymin(),previous.xmax(),h.p.y());
			Rectangle rectr = new Rectangle(previous.xmin(),h.p.y(),previous.xmax(),previous.ymax());
			if(mindist>=rectl.distanceTo(p)){
				if(mindist > h.l.p.distanceTo(p)){
					mindist = h.l.p.distanceTo(p);
					minnode = h.l;
				}
				level++;
				previous = rectl;
				nearest(h.l,p,level,mindist,previous,minnode);
			}
		    if(mindist>=rectr.distanceTo(p)){
				if(mindist > h.r.p.distanceTo(p)){
					mindist = h.r.p.distanceTo(p);
					minnode = h.r;
				}
				level++;
				previous = rectr;
				nearest(h.r,p,level,mindist,previous,minnode);
			}
			else{
				return h.p;
			}
		}
	    return minnode.p;
	
	}
	
	
	public List<Point> rangeSearch(Rectangle rect){
		List<Point> list = new List<>();
		if(isEmpty()){
			return null;
		}
		else{
			Rectangle root = new Rectangle(0,100,0,100);
			if(root.intersects(rect)){
				int level = 1;
				list.insertAtFront(head.p);
				return rangeS(head,rect,level,list,null);
			}
			else{
				return null;
			}
			 
		}
	} // Returns a list
	// with the Points that are contained in the rectangle
	
	public List<Point> rangeS(TreeNode h, Rectangle rect, int level, List<Point> list, TreeNode previous){
		if(h==null){
			return list;
		}
		
		 
	    if(level==1){
	    	Rectangle rectl = new Rectangle(0,h.p.x(),0,100);
			Rectangle rectr = new Rectangle(h.p.x(),100,0,100);
			if(rectl.intersects(rect)==true){
				level++;
				list.insertAtFront(h.l.p);
				rangeS(h.l,rect,level,list,h);
			}
		    if(rectr.intersects(rect)==true){
		    	level++;
		    	list.insertAtFront(h.r.p);
				rangeS(h.r,rect,level,list,h);
			}
			else{
				return list;
			}
	    }
		else if (level%2==1){
			Rectangle rectl = new Rectangle(0,h.p.x(),0,previous.p.y());
			Rectangle rectr = new Rectangle(h.p.x(),100,previous.p.y(),100);
			if(rectl.intersects(rect)==true){
				level++;
				list.insertAtFront(h.l.p);
				rangeS(h.l,rect,level,list,h);
			}
		    if(rectr.intersects(rect)==true){
		    	level++;
		    	list.insertAtFront(h.r.p);
				rangeS(h.r,rect,level,list,h);
			}
			else{
				return list;
			}
		}
		else{
			Rectangle rectl = new Rectangle(0,previous.p.x(),0,h.p.y());
			Rectangle rectr = new Rectangle(previous.p.x(),100,h.p.y(),100);
			if(rectl.intersects(rect)==true){
				level++;
				list.insertAtFront(h.l.p);
				rangeS(h.l,rect,level,list,h);
			}
		    if(rectr.intersects(rect)==true){
		    	level++;
		    	list.insertAtFront(h.r.p);
				rangeS(h.r,rect,level,list,h);
			}
			else{
				return list;
			}
		}
	    return list;
	}
	public static void main( String args[] ){
			String path=args[0];
			File f = null;
	        BufferedReader reader = null;
	        String line = null;
	        
	        

	        try {
	            f = new File(path);
	        } catch (NullPointerException e) {
	            System.err.println("File not found.");
	        }
	        try {
	        	reader = new BufferedReader(new InputStreamReader(new FileInputStream(f)));

	            
	        } catch (FileNotFoundException e) {
	            System.err.println("Error opening file!");
	        }
	        try {
	        	line = reader.readLine();
	        	if(line!=null){
	        		String [] tokens = line.split("\\s+");
	        		int N = Integer.parseInt(tokens[0]);
	        		
	        		line = reader.readLine();
	        	}
				while( (line !=  null)&&(check==true) ){
	        
					String [] tokens = line.split("\\s+");
					int t = Integer.parseInt(tokens[0]);
					int m = Integer.parseInt(tokens[1]);
					if((t%1==0)&&(m%1==0)&&(m>0)&&(m<=128)){
						PrintJob pj = new PrintJob(t,m);			
						if(t>=PJlist.getItem(PJlist.getLastNode()).getArrivalTime()){
							PJlist.insertAtBack(pj);
						}
						else{
							System.out.println("Error!!! Invalid parametres. In line:"+counter);
							check=false;
						}
					}
					else{
						System.out.println("Error!!! Invalid parametres. In line:"+counter);
						check=false;
					}
					
					counter++;
					line = reader.readLine();
				}
	        } catch (IOException e) {
	            System.out.println("Line  Sudden end.");
	        }
	        try {
	            reader.close();
	        } catch (IOException e) {
	            System.err.println("Error closing file.");
	        }
	    
	}
}
