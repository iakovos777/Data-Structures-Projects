/**
 * Single-link List. Uses {@link ListNode} for list nodes.
 */
public class List
{
	private ListNode firstNode;
	private ListNode lastNode;
	private String name; // string like "list" used in printing
	
	/**
	 * constructor creates empty List with "list" as the name
	 */
	public List()
	{
		this("PrintJob list");
	} 
	
	/**
	 * constructor creates an empty List with a name.
	 * @param listName the list name
	 */
	public List( String listName)
	{
		name = listName;
		firstNode = lastNode = null;
	} 

	
	

	/**
	 * Inserts an element at the end of the list
	 * @param insertItem the inserted item
	 */
	public void insertAtBack( PrintJob insertItem )
	{
		ListNode node = new ListNode( insertItem );
		if ( isEmpty() ) // firstNode and lastNode refer to same Object
		firstNode = lastNode = node;
		else { // lastNode's nextNode refers to new node
			lastNode.nextNode = node;
			lastNode = node;
			//you can replace the two previous lines with this line: lastNode = lastNode.nextNode = new ListNode( insertItem );
		}
	} 

	/**
	 * Returns and removes the data from the list head
	 * @return the data contained in the list head
	 * @throws EmptyListException if the list is empty
	 */
	public Object removeFromFront() throws EmptyListException
	{
		if ( isEmpty() ) // throw exception if List is empty
		throw new EmptyListException( name );

		Object removedItem = firstNode.data; // retrieve data being removed

		// update references firstNode and lastNode
		if ( firstNode == lastNode )
		firstNode = lastNode = null;
		else
		firstNode = firstNode.nextNode;

		return removedItem; // return removed node data
	} 

	
	
	/**
	 * Determine whether list is empty
	 * @return true if list is empty
	 */
	public boolean isEmpty()
	{
		return firstNode == null; // return true if List is empty
	} // end method isEmpty

	/**
	 * Prints the list's contents to System.out
	 */
	public void print()
	{
		if ( isEmpty() )
		{
			System.out.printf( "Empty %s\n", name );
			return;
		} // end if

		System.out.printf( "The %s is: ", name );
		ListNode current = firstNode;

		// while not at end of list, output current node's data
		while ( current != null )
		{
			System.out.printf( "%s ", current.data );
			current = current.nextNode;
		} // end while

		System.out.println( "\n" );
	} 
	
	public PrintJob peek(){
		return firstNode.getPrintJob();
	}
	
	public PrintJob TakeItem(ListNode x){
		return x.getPrintJob();
	}
} 
