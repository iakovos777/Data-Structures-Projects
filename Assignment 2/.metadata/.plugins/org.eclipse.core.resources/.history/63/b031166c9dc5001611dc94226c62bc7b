import java.io.*;




public class AlgorithmB {
	
	List PJlist = new List();
	int counter =0;
	boolean check = true ;
			
	public void loadFile(String path) {
        File f = null;
        BufferedReader reader = null;
        String line = null;
        
        

        try {
            f = new File(path);
        } catch (NullPointerException e) {
            System.err.println("File not found.");
        }
        try {
        	reader = new BufferedReader(new InputStreamReader(new FileInputStream(f)));

            
        } catch (FileNotFoundException e) {
            System.err.println("Error opening file!");
        }
        try {
        	line = reader.readLine();
			while( (line !=  null)&&(check==true) ){
        
				String [] tokens = line.split("\\s+");
				int t = Integer.parseInt(tokens[0]);
				int m = Integer.parseInt(tokens[1]);
				if((t%1==0)&&(m%1==0)&&(m>0)&&(m<=128)){
					PrintJob pj = new PrintJob(t,m);			
					if(t>=PJlist.getItem(PJlist.getLastNode()).getArrivalTime()){
						PJlist.insertAtBack(pj);
					}
					else{
						System.out.println("Error!!! Invalid parametres. In line:"+counter);
						check=false;
					}
				}
				else{
					System.out.println("Error!!! Invalid parametres. In line:"+counter);
					check=false;
				}
				
				counter++;
				line = reader.readLine();
			}
        } catch (IOException e) {
            System.out.println("Line  Sudden end.");
        }
        try {
            reader.close();
        } catch (IOException e) {
            System.err.println("Error closing file.");
        }
    }
	
	
	public void TaskPriority(){
		int T = 0;
		int averageWaitingTime =0;
		int maxWaitingTime = 0;
		int printedItems = 0;
		int id = 0;
		PrintJob job; 
		job = PJlist.peek();
		T= PJlist.peek().getArrivalTime();
		MaxPQ PQ = new MaxPQ(counter);
		PQ.insert(job);
		PJlist.removeFromFront();
		while(T== PJlist.peek().getArrivalTime()){
			job = PJlist.peek();
			PQ.insert(job);
			PJlist.removeFromFront();
		}
		
		while(!PQ.empty()){
			job = PQ.getMax();
			printedItems++;
			int T1 = T;
			T=T+job.getSize();
			job.setWaitingTime(T-job.getArrivalTime());
			averageWaitingTime = averageWaitingTime+ job.getWaitingTime();
			if(job.getWaitingTime()>maxWaitingTime){
				maxWaitingTime= job.getWaitingTime();
				id = job.getId();
			}
			Printer(T,job);
			while((T>= PJlist.peek().getArrivalTime())&&(T1<= PJlist.peek().getArrivalTime())){
				job = PJlist.peek();
				PQ.insert(job);
				PJlist.removeFromFront();
				
			}
			
			
			
			
		}
		averageWaitingTime = averageWaitingTime/printedItems;
		Writer output= null;



		try	{
		output=  new BufferedWriter(new FileWriter("Printer results.txt", true));
		}
		catch (IOException e) {
			System.err.println("Error opening file for writing!");
		}
		try {
			output.append("\n");
			output.write("Average waiting time = "+averageWaitingTime+ "\n" +"Maximum waiting time ="+maxWaitingTime+",achieved by file " +id);
			
			
		}
		catch(IOException e) {
			System.err.println("Error writing file.");
		}
		
		
		
		try {
			output.close();
		}
		catch (IOException e) {
			System.err.println("Error closing file.");
		}
	}
		
		
		
		public void Printer(int time, PrintJob pjob){
			String newLine = System.getProperty("line.separator");
			Writer output= null;



			try	{
			output=  new BufferedWriter(new FileWriter("Printer results.txt", true));
			}
			catch (IOException e) {
				System.err.println("Error opening file for writing!");
			}
			try {
				output.append("\n");
				output.write("t="+time+ ",completed file" + pjob.getId() + newLine);
				
				
			}
			catch(IOException e) {
				System.err.println("Error writing file.");
			}
			
			
			
			try {
				output.close();
			}
			catch (IOException e) {
				System.err.println("Error closing file.");
			}
		}
		
		
}






























